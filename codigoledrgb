// #include <Adafruit_NeoPixel.h>

// /*
//   Ping))) Sensor

//   This sketch reads a PING))) ultrasonic rangefinder and returns the distance
//   to the closest object in range. To do this, it sends a pulse to the sensor to
//   initiate a reading, then listens for a pulse to return. The length of the
//   returning pulse is proportional to the distance of the object from the sensor.

//   The circuit:
// 	- +V connection of the PING))) attached to +5V
// 	- GND connection of the PING))) attached to ground
// 	- SIG connection of the PING))) attached to digital pin 7

//   created 3 Nov 2008
//   by David A. Mellis
//   modified 30 Aug 2011
//   by Tom Igoe

//   This example code is in the public domain.

//   https://www.arduino.cc/en/Tutorial/BuiltInExamples/Ping
// */

// // this constant won't change. It's the pin number of the sensor's output:
// #define D_in 3       //Nomeia o pino 6 do Arduino
// #define qtdeLeds 50    //Informa a quantidade de LEDs que serão ligados em cascata

// int valor_ultrassom = 0;
// Adafruit_NeoPixel pixels(qtdeLeds, D_in);

// const int trigPin = 10;
// const int echoPin = 9;

// const byte red = 9;
// const byte green = 11;
// const byte blue = 10;

// const int threshold = 15;
// const int af = 25;
// const int av = 35;
// const int avx = 45;

// void setup() {
//   // initialize serial communication:
//   Serial.begin(9600);
  
//   pinMode(D_in, OUTPUT);      //Configura o pino 6 como saída
//   pixels.begin();             //Inicia o objeto "pixels"
  
//   pinMode(trigPin, OUTPUT);
//   pinMode(echoPin, INPUT);
  
// }

// void loop() {
//   // establish variables for duration of the ping, and the distance result
//   // in inches and centimeters:
//   pixels.clear();      //desliga todos os LEDs
//   long duration, inches, cm;

//   // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
//   // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
  

//   digitalWrite(trigPin, LOW);
//   delayMicroseconds(2);
//   digitalWrite(trigPin, HIGH);
//   delayMicroseconds(10);
//   digitalWrite(trigPin, LOW);
  
  

//   // The same pin is used to read the signal from the PING))): a HIGH pulse
//   // whose duration is the time (in microseconds) from the sending of the ping
//   // to the reception of its echo off of an object.

//   duration = pulseIn(echoPin, HIGH);

//   // convert the time into a distance
//   inches = microsecondsToInches(duration);
//   cm = microsecondsToCentimeters(duration);

//   for(int i=0; i < (cm/2) ; i++){        //para i = 0, se i menor que a quantidade de leds, incremente 1 em i
//     pixels.setPixelColor(i, pixels.Color(random(256), random(256), random(256)));     //liga o led correspondente ao número da variável i na cor vermelha
//     pixels.show();      //executa os parâmetros do comando acima
//     delay(30);         //Aguarda 500 milissegundos

//   }

//   Serial.print(inches);
//   Serial.print("in, ");
//   Serial.print(cm);
//   Serial.print("cm");
//   Serial.println();

//   delay(30);
// }

// long microsecondsToInches(long microseconds) {
//   // According to Parallax's datasheet for the PING))), there are 73.746
//   // microseconds per inch (i.e. sound travels at 1130 feet per second).
//   // This gives the distance travelled by the ping, outbound and return,
//   // so we divide by 2 to get the distance of the obstacle.
//   // See: https://www.parallax.com/package/ping-ultrasonic-distance-sensor-downloads/
//   return microseconds / 74 / 2;
// }

// long microsecondsToCentimeters(long microseconds) {
//   // The speed of sound is 340 m/s or 29 microseconds per centimeter.
//   // The ping travels out and back, so to find the distance of the object we
//   // take half of the distance travelled.
//   return microseconds / 29 / 2;
// }

#include <Adafruit_NeoPixel.h>

// Definições do sensor e LEDs
#define D_in 3
#define qtdeLeds 50

int valor_ultrassom = 0;
Adafruit_NeoPixel pixels(qtdeLeds, D_in);

const int trigPin = 10;
const int echoPin = 9;


void setup() {
  Serial.begin(9600);
  pinMode(D_in, OUTPUT);      // Configura o pino 6 como saída
  pixels.begin();             // Inicia o objeto "pixels"
  
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
}

void loop() {
  pixels.clear();      // Desliga todos os LEDs
  long duration, inches, cm;

  // Envia o sinal de trigger para o sensor
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Recebe o eco e calcula a distância
  duration = pulseIn(echoPin, HIGH);
  inches = microsecondsToInches(duration);
  cm = microsecondsToCentimeters(duration);

  // Inversão da lógica: quando o objeto está perto, a intensidade é baixa
  // e quando está longe, a intensidade é alta
  int ledCount = map(cm, 0, 200, qtdeLeds, 0);  // Mapeia a distância para o número de LEDs (invertido)

  // Acende os LEDs conforme a distância (invertido)
  for(int i = 0; i < (qtdeLeds*3); i++) {
    if(i < ledCount) {
      // Aumenta a intensidade à medida que a distância aumenta (efeito inverso)
      pixels.setPixelColor(i, pixels.Color(0, random(1, 255), 0));
    } else {
      pixels.setPixelColor(i, pixels.Color(0, 0, 0));  // Desliga o LED
    }
  }

  pixels.show();      // Aplica a atualização dos LEDs
  delay(30);          // Aguarda 30ms para a próxima leitura

  // Exibe os valores de distância no monitor serial
  Serial.print(inches);
  Serial.print("in, ");
  Serial.print(cm);
  Serial.print("cm");
  Serial.println();
}

long microsecondsToInches(long microseconds) {
  return microseconds / 74 / 2;
}

long microsecondsToCentimeters(long microseconds) {
  return microseconds / 29 / 2;
}
